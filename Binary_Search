class BinarySearchExample{
2. public static void binarySearch(int arr[], int first, int last, int key){
3. int mid = (first + last)/2;
4. while( first <= last ){
5. if ( arr[mid] < key ){
6. first = mid + 1;
7. }else if ( arr[mid] == key ){
8. System.out.println("Element is found at index: " + mid);
9. break;
10. }else{
11. last = mid - 1;
12. }
13. mid = (first + last)/2;
14. }
15. if ( first > last ){
16. System.out.println("Element is not found!");
17. }
18. }
19. public static void main(String args[]){
20. int arr[] = {10,20,30,40,50};
21. int key = 30;
22. int last=arr.length-1;
23. binarySearch(arr,0,last,key);
24. }
25. }
//Binary search in java Using recursion
1. class BinarySearchExample1{
2. public static int binarySearch(int arr[], int first, int last, int key){
3. if (last>=first){
4. int mid = first + (last - first)/2;
5. if (arr[mid] == key){
9
6. return mid;
7. }
8. if (arr[mid] > key){
9. return binarySearch(arr, first, mid1, key);//search in left subarray
10. }else{
11. return binarySearch(arr, mid+1, last, key);//search in r
ight subarray
12. }
13. }
14. return -1;
15. }
16. public static void main(String args[]){
17. int arr[] = {10,20,30,40,50};
18. int key = 30;
19. int last=arr.length-1;
20. int result = binarySearch(arr,0,last,key);
21. if (result == -1)
22. System.out.println("Element is not found!");
23. else
24. System.out.println("Element is found at index: "+resul
t);
25. }
26. }
